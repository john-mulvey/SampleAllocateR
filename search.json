[{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Methods for Allocating Samples to Batches","text":"Especially costs performing assays decreased, move analysing samples carefully controlled experiments analysing many samples directly patient population interest. Controlled experiments performed experimental model systems order covariates can held constant across experimental units, whereas clinical samples commonly number covariates also impact upon dependent variable interest. Performing assays large number samples requires analysed batches, results technical variation accounted analysis. demonstrate tool allocate pre-selected samples technical batches way maximises balance specified covariates. maximising balance maximise ability separate technical batch variation biological effects interest. increases precision estimates reducing uncertainty coefficient estimates primary predictors variables, hence gives greater statistical power detect true effects.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"generate-some-simulated-data-with-covarirates","dir":"Articles","previous_headings":"Introduction","what":"Generate some simulated data with covarirates","title":"Methods for Allocating Samples to Batches","text":"First, generate simulated data covariates. generate 98 samples 3 covariates, allocate samples batches 13.","code":"toy_data = simulate_data(n_samples = 98, block_size = 2)  head(toy_data) #>   sample_id age_at_baseline bmi_at_baseline sex sample_timepoint treatment #> 1  sample_1        65.70611        22.86157   M      timepoint_1 treatment #> 2  sample_2        65.70611        22.86157   M      timepoint_2 treatment #> 3  sample_3        53.54606        33.09642   M      timepoint_1 treatment #> 4  sample_4        53.54606        33.09642   M      timepoint_2 treatment #> 5  sample_5        43.34455        29.96901   F      timepoint_1 treatment #> 6  sample_6        43.34455        29.96901   F      timepoint_2 treatment #>   subject_id #> 1  subject_1 #> 2  subject_1 #> 3  subject_2 #> 4  subject_2 #> 5  subject_3 #> 6  subject_3"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"randomisation","dir":"Articles","previous_headings":"Introduction","what":"Randomisation","title":"Methods for Allocating Samples to Batches","text":"common approach reported analysis clinical samples simply randomise samples different batches. Randomisation frequently used clinical trials try ensure treatment groups balanced respect relevant covariates. circumstance, covariates patients known time treatments allocated randomisation best option ensure control treatment groups balanced respect covariates. statistical terms, bias: expectation value given covariates equal control treatment group: .e. repeated experiment many times, average value covariate groups. can simply generate random layout toy dataset 98 samples batch size 13 follows: function allocate_samples returns list layout samples batches layout slot probability covaraite differ batches (appropriate continuous categorical variables depending upon input data type) results slot. given set samples, sample size fixed thus calculating p-value difference covariate batches directly related underlying test statistic. results slot contains p-value difference covariate batches. can assess balance layout across specified covariates calculating balance score (defined following sections). metric range [0, 1], higher values indicating better balance. can see balance score layout low (indicative imbalance), despite fact layout generated randomly. whilst randomisation ensures statistical bias, remove impact chance, still variance balance covariates batches. order demonstrate empirically, can generate large number random layouts examine distribution balance score. can seen documentation, allocate_samples() function includes random seed reproducibility, explicitly set series different random seeds. expected given lack bias randomisation guarantees, many iterations observe uniform distribution p-value calcualted single variable. note within set random layouts, still many layouts low p-value: indicating covariate balanced batches despite randomisation. order simultaneously assess balance multiple covariates batches, combine p-values covariates calculated appropriate statistical test. used established approach calculating harmonic mean p-values, advantage alternative options require restrictive assumption covariates independent. distribution balance score across many random layouts shows layouts high score indicate well balanced across covariates.  “brute force” approach allocating samples batches simply select best layout random layouts. implemented allocate_samples function using method = \"best_random\" argument demonstration purposes (though note due use different random seeds, layout may differ generated ). , generate 1000 random layouts select one best balance covariates. can see best random layout clearly superior layout common practice performing single randomisation . side coin, still many possible layouts superior balance.","code":"single_layout = allocate_samples(toy_data,                                  batch_size = 13,                                  covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                  method = \"random\",                                  blocking_variable = NA) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, #> sample_id)`  head(single_layout$layout) #>   age_at_baseline bmi_at_baseline sex sample_id batch_allocation #> 1        65.70611        22.86157   M  sample_1                7 #> 2        65.70611        22.86157   M  sample_2                7 #> 3        53.54606        33.09642   M  sample_3                3 #> 4        53.54606        33.09642   M  sample_4                6 #> 5        43.34455        29.96901   F  sample_5                3 #> 6        43.34455        29.96901   F  sample_6                2 #>   sample_timepoint treatment subject_id #> 1      timepoint_1 treatment  subject_1 #> 2      timepoint_2 treatment  subject_1 #> 3      timepoint_1 treatment  subject_2 #> 4      timepoint_2 treatment  subject_2 #> 5      timepoint_1 treatment  subject_3 #> 6      timepoint_2 treatment  subject_3 calculate_balance_score(single_layout[['results']]$p_value) #> [1] 0.5169404 set.seed(123) random_seeds <- sample(1:10000, 1000, replace = FALSE)  results_list <- lapply(random_seeds, function(seed) {   allocate_samples(toy_data,                    batch_size = 13,                    covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                    method = \"random\",                    blocking_variable = NA,                    seed = seed) })  # plot histrogram for a single covariate: age_at_baseline probability_age_at_baseline <- lapply(seq_along(results_list), function(i) {   data.frame(     iteration_number = i,     p_value = results_list[[i]][['results']] %>%       filter(covariate == \"age_at_baseline\") %>%       pull(p_value)   ) }) plot_data_age_at_baseline <- do.call(rbind, probability_age_at_baseline) # plot histrogram of probability that age_at_baseline does not differ between the batches plot_data_age_at_baseline %>%   ggplot(aes(x = p_value)) +   geom_histogram(binwidth = 0.05, boundary = 0) balance_score <- lapply(seq_along(results_list), function(i) {   data.frame(     iteration_number = i,     balance_score = calculate_balance_score(results_list[[i]][['results']]$p_value)   ) })  plot_data_balance_score <- do.call(rbind, balance_score)  # plot histrogram of balance scores plot_data_balance_score  %>%   ggplot(aes(x = balance_score)) +   geom_histogram(binwidth = 0.05, boundary = 0) +   xlim(c(0, 1)) best_random_layout = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                  iterations = 1000,                                  method = \"best_random\") #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98  #> Balance Score: 0.9100344 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, #> sample_id)`  head(best_random_layout$layout) #>   age_at_baseline bmi_at_baseline sex sample_id batch_allocation #> 1        65.70611        22.86157   M  sample_1                2 #> 2        65.70611        22.86157   M  sample_2                6 #> 3        53.54606        33.09642   M  sample_3                2 #> 4        53.54606        33.09642   M  sample_4                5 #> 5        43.34455        29.96901   F  sample_5                6 #> 6        43.34455        29.96901   F  sample_6                1 #>   sample_timepoint treatment subject_id #> 1      timepoint_1 treatment  subject_1 #> 2      timepoint_2 treatment  subject_1 #> 3      timepoint_1 treatment  subject_2 #> 4      timepoint_2 treatment  subject_2 #> 5      timepoint_1 treatment  subject_3 #> 6      timepoint_2 treatment  subject_3 calculate_balance_score(best_random_layout[['results']]$p_value) #> [1] 0.9100344"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"optimisation-methods-from-machine-learning","dir":"Articles","previous_headings":"Introduction","what":"Optimisation methods from machine learning","title":"Methods for Allocating Samples to Batches","text":"Even processing capabilities modern desktop computers, brute force approaches applied problematic since number possible combinations quickly explodes. Since exhaustive search therefore impractical, exploit machine learning optimisation approaches order maximise balance batches generated. Specifically utilise simulated annealing algorithm, heuristic optimisation method can efficiently approximate global optimum large search space. Interested readers directed towards general introduction wikipedia [wikipedia_2023a]. Practically, implement method default method using allocate samples different batches (can explicitly specified using argument method = \"simulated_annealing\").  clarity, return plot make easy user confirm simulated annealing algorithm run sufficient number iterations converge, seen saturation balance score. Accordingly, also achieve balanced configuration best random layout. can also compare run time simulated annealing algorithm best random layout.  addition generating balanced layout, see machine learning approach also achieves fewer iterations less run time.","code":"optimal_layout = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                  iterations = 300,                                  plot_convergence = TRUE) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98 #> Balance Score of final layout: 0.9969619 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, #> sample_id)` calculate_balance_score(optimal_layout[['results']]$p_value) #> [1] 0.9971285 # rerun best_random_layout to calculate run time runtime_brute_force <- system.time({   best_random_layout <- allocate_samples(toy_data,                                           batch_size = 13,                                           covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                          iterations = 1000,                                          method = \"best_random\") }) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98  #> Balance Score: 0.9100344 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, #> sample_id)`  # rerun optimal_layout to calculate run time runtime_optimal <- system.time({   optimal_layout <- allocate_samples(toy_data,                                       batch_size = 13,                                       covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                      method = \"simulated_annealing\",                                      iterations = 300) }) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98 #> Balance Score of final layout: 0.9969619 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, #> sample_id)`  # plot run times data.frame(method = c(\"brute_force\", \"simulated_annealing\"),            time = c(runtime_brute_force, runtime_optimal)) %>%   ggplot(aes(x = method, y = time, fill = method)) +   geom_col() +   labs(y = \"Times (s)\")"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"blocking","dir":"Articles","previous_headings":"Introduction","what":"Blocking","title":"Methods for Allocating Samples to Batches","text":"adage design experiments, commonly attributed George Box, “block can, randomise ”. discussed limitations randomisation situations covariates samples already known advance. However, advice block variables still pertinent situation, blocking completely remove impact technical batch effect upon blocked predictor variable rather mitigate . also implement functionality block samples within batches specified variable follows:","code":"optimal_layout_blocked = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                  blocking_variable = \"subject_id\",                                  iterations = 300,                                  method = \"simulated_annealing\") #> Blocking variable:  subject_id  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 98 #> Balance Score of final layout: 0.9935726 #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, subject_id, #> sample_id)`"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"plot-an-overview-of-the-layout","dir":"Articles","previous_headings":"Introduction","what":"plot an overview of the layout","title":"Methods for Allocating Samples to Batches","text":"order easily get overview balance particular layout (useful sanity check!), provide simple function plot levels covariates across batches.","code":"plot_layout(optimal_layout_blocked, covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\")) #> $continuous #>  #> $categorical"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"session-info","dir":"Articles","previous_headings":"","what":"session info","title":"Methods for Allocating Samples to Batches","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_4.0.0         dplyr_1.1.4           SampleAllocateR_1.0.0 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6       jsonlite_2.0.0     compiler_4.5.1     tidyselect_1.2.1   #>  [5] tidyr_1.3.1        jquerylib_0.1.4    systemfonts_1.3.1  scales_1.4.0       #>  [9] textshaping_1.0.4  yaml_2.3.10        fastmap_1.2.0      R6_2.6.1           #> [13] labeling_0.4.3     generics_0.1.4     knitr_1.50         tibble_3.3.0       #> [17] desc_1.4.3         bslib_0.9.0        pillar_1.11.1      RColorBrewer_1.1-3 #> [21] rlang_1.1.6        cachem_1.1.0       xfun_0.53          fs_1.6.6           #> [25] sass_0.4.10        S7_0.2.0           cli_3.6.5          withr_3.0.2        #> [29] pkgdown_2.1.3      magrittr_2.0.4     digest_0.6.37      grid_4.5.1         #> [33] lifecycle_1.0.4    vctrs_0.6.5        evaluate_1.0.5     glue_1.8.0         #> [37] farver_2.1.2       ragg_1.5.0         purrr_1.1.0        rmarkdown_2.30     #> [41] tools_4.5.1        pkgconfig_2.0.3    htmltools_0.5.8.1"},{"path":"https://john-mulvey.github.io/SampleAllocateR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Mulvey. Author, maintainer, copyright holder.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulvey J (2025). SampleAllocateR: Covariate Balanced Allocation Preselected Samples Experimental Batches. R package version 1.0.0, https://john-mulvey.github.io/SampleAllocateR/.","code":"@Manual{,   title = {SampleAllocateR: Covariate Balanced Allocation of Preselected Samples to Experimental Batches},   author = {John Mulvey},   year = {2025},   note = {R package version 1.0.0},   url = {https://john-mulvey.github.io/SampleAllocateR/}, }"},{"path":"https://john-mulvey.github.io/SampleAllocateR/index.html","id":"installation","dir":"","previous_headings":"","what":"Covariate Balanced Allocation of Preselected Samples to Experimental Batches","title":"Covariate Balanced Allocation of Preselected Samples to Experimental Batches","text":"install latest version: Note building vignettes currently slow, possible supply pre-built installing pacakge github. rather wait, vignette can viewed package website","code":"# if required, install remotes package install.packages(\"remotes\")  # install package from github remotes::install_github(\"https://github.com/john-mulvey/SampleAllocateR\", build_vignettes = TRUE)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/index.html","id":"quick-start-guide","dir":"","previous_headings":"","what":"Quick Start Guide","title":"Covariate Balanced Allocation of Preselected Samples to Experimental Batches","text":"order generate layout optimal balance covariates experimental batches: resulting object contains - original input data supplied, allocated batch appended - results testing balance covariate batches - data optimisation process confirm method converged, method used default “simulated_annealing” simple sanity check, values covariates can visualised using plot_layout function: allocated layout can saved file, example :","code":"optimal_layout_blocked = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                  blocking_variable = \"block_id\",                                  iterations = 1000,                                  method = \"simulated_annealing\") plot_layout(optimal_layout_blocked, covariates = c(\"covariate1\", \"covariate2\", \"covariate3\")) write.csv(optimal_layout_blocked[[\"layout\"]], \"optimal_layout.csv\", row.names = FALSE)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate Samples to Batches Using Specified Method — allocate_samples","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"function allocates samples batches based specified method, can random allocation, best random allocation, simulated annealing. supports optional blocking handles various types covariates.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"","code":"allocate_samples(   data,   id_column = \"sample_id\",   method = \"simulated_annealing\",   covariates,   blocking_variable = NA,   batch_size,   iterations = 1000,   temperature = 1,   cooling_rate = 0.975,   seed = 123,   plot_convergence = TRUE,   collapse_rare_factors = FALSE,   balance_metric = \"harmonic_mean\" )"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"data data.frame containing dataset processed. id_column string specifying column name data contains sample IDs. default \"sample_id\". method string specifying allocation method used. Valid options \"random\", \"best_random\", \"simulated_annealing\". default \"simulated_annealing\". covariates character vector listing names covariate columns data considered allocation. blocking_variable optional string specifying name column used blocking variable. provided NA, blocking applied. batch_size integer specifying size batch. iterations integer specifying number iterations run \"best_random\" \"simulated_annealing\" methods. default 1000. temperature numeric specifying initial temperature simulated annealing method. default 1. cooling_rate numeric specifying cooling rate simulated annealing method. default 0.975. seed integer used setting seed ensure reproducibility. default 123. plot_convergence = TRUE logical indicating whether plot convergence optimisation process, relevant method specified \"simulated_annealing\". default TRUE. collapse_rare_factors = FALSE logical indicating whether collapse rare factor levels covariates. default FALSE. Factor levels present counts either less 5 0.05*batch_size collapsed single level \"\". Please note layout returned contain collapsed factor levels, rather original input data. balance_metric character string specifying metric use calculating balance score. Valid options \"harmonic_mean\" (default) \"product\".","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"object containing allocation layout samples batches, along specified blocking covariate adjustments. exact structure return value depends allocation method used.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"function first checks validity specified method parameters, preprocesses data according specified covariates blocking variable. applies specified allocation method assign samples batches, aiming balance distribution covariates , applicable, blocking levels across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"","code":"# Allocate samples using simulated annealing without blocking my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 100   #> Balance Score of final layout: 1  #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, sample_id)`"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_single_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","title":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","text":"function randomly allocates samples batches, support blocking variables including unequal block sizes (using bin-packing algorithm).","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_single_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","text":"","code":"allocate_single_random(data, batch_size, blocking_variable = NA)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_single_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","text":"data data.frame containing dataset allocated. Must include sample_id column. batch_size Integer specifying size batch. blocking_variable Optional string specifying blocking variable column name. NA missing, blocking applied.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_single_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","text":"list two elements: layout: data.frame batch_allocation column added (may include padding rows) results: data.frame covariate balance test results","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_single_random.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocate Samples to Batches with Random Allocation (Internal Function) — allocate_single_random","text":"Handles three scenarios: Case 1: blocking variable Samples randomly allocated batches without constraints. Case 2a: Blocking variable equal block size Whole blocks randomly assigned batches, keeping samples within blocks together. Case 2b: Blocking variable unequal block size Uses first-fit bin-packing algorithm assign blocks batches keeping blocks intact. Blocks randomized packing. siutation requires trade-bin packing efficiency randomness generating layout, cases can use batches minimum possible number.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/calculate_balance_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Balance Score — calculate_balance_score","title":"Calculate Balance Score — calculate_balance_score","text":"function calculates covariate balance score calculating (default) harmonic mean p-values individual covariate balance tests. require assumptions covariates independent.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/calculate_balance_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Balance Score — calculate_balance_score","text":"","code":"calculate_balance_score(   p_values,   na.rm = TRUE,   balance_metric = \"harmonic_mean\" )"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/calculate_balance_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Balance Score — calculate_balance_score","text":"p_values numeric vector containing p-values individual covariate balance tests. values must 0 1. na.rm Logical; TRUE (default), NA values removed calculation. FALSE NA values present, function return NA. balance_metric character string specifying metric use calculating balance score. Valid options \"harmonic_mean\" (default) \"product\".","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/calculate_balance_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Balance Score — calculate_balance_score","text":"numeric value representing overall balance score. Higher values indicate better covariate balance.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/calculate_balance_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Balance Score — calculate_balance_score","text":"","code":"# Example with well-balanced covariates p_vals <- c(0.8, 0.9, 0.85) calculate_balance_score(p_vals) #> [1] 0.848037  # Example with poorly balanced covariates p_vals <- c(0.01, 0.02, 0.03) calculate_balance_score(p_vals) #> [1] 0.01636364  # Handling NA values p_vals_with_na <- c(0.8, NA, 0.85) calculate_balance_score(p_vals_with_na, na.rm = TRUE) #> [1] 0.8242424"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Significant Covariates in Output — check_significance","title":"Check for Significant Covariates in Output — check_significance","text":"function evaluates significance covariates based adjusted p-values. applies Bonferroni correction p-values associated covariate identifies statistically significant. recommend using function conduct hypothesis testing, instead sanity check identify covariates may potentially problematic.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Significant Covariates in Output — check_significance","text":"","code":"check_significance(output)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Significant Covariates in Output — check_significance","text":"output list similar object expected contain results data frame. results data frame least two columns: covariate name covariate p_value associated p-value statistical test.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Significant Covariates in Output — check_significance","text":"data frame listing covariates found statistically significant adjusting p-values multiple testing. covariates found significant, function return empty data frame. return data frame includes columns covariate name count significant instances, although count typically one listed covariate unless input output structure allows duplicate covariate names.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for Significant Covariates in Output — check_significance","text":"function first retrieves results data frame provided output object. calculates adjusted p-values using Bonferroni correction method. Covariates adjusted p-values less 0.05 considered statistically significant. function outputs names significant covariates counts.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Significant Covariates in Output — check_significance","text":"","code":"my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 100   #> Balance Score of final layout: 1  #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, sample_id)`  significant_covariates <- check_significance(allocated_data) #> No significant covariates"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Layout of Samples by Covariate Type — plot_layout","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"function generates two types plots given layout: one continuous covariates another categorical covariates. visualizes samples allocated across batches, separate plots covariate.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"","code":"plot_layout(output, id_column = \"sample_id\", covariates = NULL)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"output lsit created allocate_samples(), containing item called layout  data.frame containing layout information, including sample IDs, batch allocation, covariates. batch_allocation column expected indicate batch sample assigned , covariates can numeric factor type. id_column name column layout data frame contains sample IDs. default value \"sample_id\". covariates character vector covariate names visualized. default value NULL, visualize covariates layout data frame.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"named list containing ggplot2 objects. list may contain two elements: continuous: ggplot2 object showing distribution continuous covariates across batches using scatter plots, covariate displayed separate facet. categorical: ggplot2 object showing distribution categorical covariates across batches using bar plots, covariate displayed separate facet different factor levels shown different colors. returned list contain elements covariate types present data. continuous covariates found, continuous element absent list, similarly categorical covariates.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"function first processes layout separate continuous categorical covariates. continuous covariates, creates scatter plot showing value covariate batch. categorical covariates, aggregates data count number samples category batch creates bar plot. plots faceted covariate provide clear comparative view distribution across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"","code":"my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: age_at_baseline - continuous #> Covariate: bmi_at_baseline - continuous #> Covariate: sex - categorical #> Number of samples: 100   #> Balance Score of final layout: 1  #> Joining with `by = join_by(age_at_baseline, bmi_at_baseline, sex, sample_id)`  plots <- plot_layout(allocated_data, covariates = c(\"age_at_baseline\", \"bmi_at_baseline\", \"sex\"))  # View individual plots plots$continuous    # Show continuous covariates plot  plots$categorical   # Show categorical covariates plot   # Save plots # ggsave(\"continuous_covariates.png\", plots$continuous) # ggsave(\"categorical_covariates.png\", plots$categorical)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_annealing_for_unequal_block_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","title":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","text":"function approximates simulated annealing extends standard simulated annealing approach handle blocking variables unequal block sizes. swapping routine enables swapping 2 blocks batches, can additionally move empty \"padding\" samples required. helps prevent algorithm becoming stuck local optima.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_annealing_for_unequal_block_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","text":"","code":"simulate_annealing_for_unequal_block_size(   data,   covariates,   blocking_variable = NA,   batch_size,   temperature,   cooling_rate,   iterations,   plot = TRUE,   balance_metric = \"harmonic_mean\" )"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_annealing_for_unequal_block_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","text":"data data.frame containing dataset allocated. Must include sample_id column. covariates character vector listing covariate column names balance. blocking_variable Optional string specifying blocking variable column name. NA missing, blocking applied. batch_size Integer specifying size batch. temperature Numeric specifying initial temperature annealing process. cooling_rate Numeric 0 1 specifying rate temperature decreases. iterations Integer specifying number iterations run. plot Logical indicating whether plot optimization progress. Default TRUE. balance_metric Character string specifying metric use (\"harmonic_mean\" \"product\").","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_annealing_for_unequal_block_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","text":"list three elements: layout: data.frame batch_allocation column added (may include padding rows) results: data.frame covariate balance test results optimisation_data: data.frame tracking optimization process across iterations","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_annealing_for_unequal_block_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Annealing Allocation for Unequal Block Sizes (Internal Function) — simulate_annealing_for_unequal_block_size","text":"function addresses complex problem optimizing batch allocation blocks unequal sizes. algorithm considers four swap scenarios: Scenario 1: Single block vs single block (optional padding) Scenario 2: Single block vs two blocks (optional padding) Scenario 3: Two blocks vs single block (optional padding) Scenario 4: Two blocks vs two blocks (optional padding) iteration, algorithm: Identifies possible swaps two randomly selected batches Randomly selects one valid swap Evaluates swap using balance score Accepts rejects based simulated annealing criteria Swaps constrained involve fewer half samples batch maintain diversity across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data with Optional Blocking — simulate_data","title":"Simulate Data with Optional Blocking — simulate_data","text":"function generates simulated dataset containing subject-level data. Users can optionally specify block sizes generate multiple samples per subject.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data with Optional Blocking — simulate_data","text":"","code":"simulate_data(n_samples, block_size = NULL, seed = 123)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data with Optional Blocking — simulate_data","text":"n_samples Integer; total number samples generate. block_size > 1, must multiple block_size. block_size Integer; number samples per subject. 1 NULL (default), generates one sample per subject. > 1, generates multiple samples per subject. seed Integer; seed random number generation ensure reproducibility.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data with Optional Blocking — simulate_data","text":"data.frame following structure: sample_id: Unique identifier sample age_at_baseline: Subject's age baseline (normally distributed, mean=55, sd=10) bmi_at_baseline: Subject's BMI baseline (normally distributed, mean=30, sd=5) sex: Subject's sex (\"M\" \"F\") sample_timepoint: Timepoint identifier (present block_size > 1) treatment: Treatment assignment (\"treatment\" \"placebo\") subject_id: Subject identifier","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Data with Optional Blocking — simulate_data","text":"block_size greater 1, function generates multiple samples per subject, creating sample_timepoint column labels \"timepoint_1\", \"timepoint_2\", etc. Subject-level characteristics (age, BMI, sex, treatment) remain constant across samples subject.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data with Optional Blocking — simulate_data","text":"","code":"# Generate data with one sample per subject simulate_data(n_samples = 100) #>      sample_id age_at_baseline bmi_at_baseline sex treatment  subject_id #> 1     sample_1        57.53319        33.93869   F treatment   subject_1 #> 2     sample_2        54.71453        33.84521   F treatment   subject_2 #> 3     sample_3        54.57130        31.66101   F treatment   subject_3 #> 4     sample_4        68.68602        24.95812   F   placebo   subject_4 #> 5     sample_5        52.74229        29.40274   M treatment   subject_5 #> 6     sample_6        70.16471        28.59802   M   placebo   subject_6 #> 7     sample_7        39.51247        32.81495   M   placebo   subject_7 #> 8     sample_8        60.84614        28.13781   M   placebo   subject_8 #> 9     sample_9        56.23854        34.88487   F treatment   subject_9 #> 10   sample_10        57.15942        28.12710   M treatment  subject_10 #> 11   sample_11        58.79639        35.26356   F   placebo  subject_11 #> 12   sample_12        49.97677        24.75411   M   placebo  subject_12 #> 13   sample_13        51.66793        23.69922   F   placebo  subject_13 #> 14   sample_14        44.81425        46.20520   M treatment  subject_14 #> 15   sample_15        44.28209        27.91571   F   placebo  subject_15 #> 16   sample_16        58.03529        31.49114   F treatment  subject_16 #> 17   sample_17        59.48210        33.18285   F   placebo  subject_17 #> 18   sample_18        55.53004        27.58110   M treatment  subject_18 #> 19   sample_19        64.22267        32.58431   F treatment  subject_19 #> 20   sample_20        75.50085        31.84482   F treatment  subject_20 #> 21   sample_21        50.08969        28.92310   F treatment  subject_21 #> 22   sample_22        31.90831        30.32647   F   placebo  subject_22 #> 23   sample_23        65.05739        29.82966   M treatment  subject_23 #> 24   sample_24        47.90799        40.64226   F treatment  subject_24 #> 25   sample_25        48.11991        26.29332   M treatment  subject_25 #> 26   sample_26        65.25571        24.52002   F treatment  subject_26 #> 27   sample_27        52.15227        30.18894   M   placebo  subject_27 #> 28   sample_28        42.79282        31.55240   M   placebo  subject_28 #> 29   sample_29        56.81303        32.18262   M treatment  subject_29 #> 30   sample_30        53.61109        27.70817   M   placebo  subject_30 #> 31   sample_31        55.05764        24.68337   F treatment  subject_31 #> 32   sample_32        58.85280        36.31593   F   placebo  subject_32 #> 33   sample_33        51.29340        28.25175   F treatment  subject_33 #> 34   sample_34        61.44377        25.67244   M   placebo  subject_34 #> 35   sample_35        52.79513        28.81860   M   placebo  subject_35 #> 36   sample_36        58.31782        29.01412   F treatment  subject_36 #> 37   sample_37        65.96839        35.54960   F treatment  subject_37 #> 38   sample_38        59.35181        30.42369   F treatment  subject_38 #> 39   sample_39        51.74068        33.77027   F treatment  subject_39 #> 40   sample_40        66.48808        27.50354   M   placebo  subject_40 #> 41   sample_41        64.93504        31.07223   M treatment  subject_41 #> 42   sample_42        60.48397        28.37657   M   placebo  subject_42 #> 43   sample_43        57.38732        30.47292   F   placebo  subject_43 #> 44   sample_44        48.72094        25.52318   F treatment  subject_44 #> 45   sample_45        68.60652        23.44599   F treatment  subject_45 #> 46   sample_46        48.99740        39.98607   M treatment  subject_46 #> 47   sample_47        76.87333        33.00354   M treatment  subject_47 #> 48   sample_48        70.32611        23.74364   F   placebo  subject_48 #> 49   sample_49        52.64300        26.94417   F treatment  subject_49 #> 50   sample_50        44.73579        24.07260   M treatment  subject_50 #> 51   sample_51        47.89593        40.99405   F   placebo  subject_51 #> 52   sample_52        57.56884        36.56206   M treatment  subject_52 #> 53   sample_53        52.53308        28.67427   F treatment  subject_53 #> 54   sample_54        51.52457        32.71597   F treatment  subject_54 #> 55   sample_55        45.48381        27.92830   F treatment  subject_55 #> 56   sample_56        54.54972        27.61877   M   placebo  subject_56 #> 57   sample_57        47.15096        26.05699   F   placebo  subject_57 #> 58   sample_58        38.32058        27.02691   F treatment  subject_58 #> 59   sample_59        51.19773        38.25454   F   placebo  subject_59 #> 60   sample_60        64.18997        29.72986   F treatment  subject_60 #> 61   sample_61        49.24653        30.59623   M treatment  subject_61 #> 62   sample_62        61.07964        31.21844   F   placebo  subject_62 #> 63   sample_63        38.82117        36.16238   F   placebo  subject_63 #> 64   sample_64        54.44438        27.41968   M treatment  subject_64 #> 65   sample_65        60.19407        25.03746   F treatment  subject_65 #> 66   sample_66        58.01153        38.37848   F   placebo  subject_66 #> 67   sample_67        56.05676        27.79418   F treatment  subject_67 #> 68   sample_68        48.59294        26.38467   F treatment  subject_68 #> 69   sample_69        46.50296        23.81863   F treatment  subject_69 #> 70   sample_70        44.75871        23.57642   M treatment  subject_70 #> 71   sample_71        56.17647        27.13013   F   placebo  subject_71 #> 72   sample_72        45.52525        33.08993   M treatment  subject_72 #> 73   sample_73        50.09443        35.54924   F treatment  subject_73 #> 74   sample_74        52.43908        33.53794   M treatment  subject_74 #> 75   sample_75        73.43862        28.18171   M treatment  subject_75 #> 76   sample_76        48.48050        30.29875   F   placebo  subject_76 #> 77   sample_77        57.35387        26.47702   M   placebo  subject_77 #> 78   sample_78        55.77961        26.41391   F treatment  subject_78 #> 79   sample_79        45.38143        34.42325   F   placebo  subject_79 #> 80   sample_80        54.28692        24.92204   M   placebo  subject_80 #> 81   sample_81        69.44551        39.77647   M   placebo  subject_81 #> 82   sample_82        59.51504        29.54840   F   placebo  subject_82 #> 83   sample_83        55.41233        31.07269   M treatment  subject_83 #> 84   sample_84        50.77503        26.30736   M   placebo  subject_84 #> 85   sample_85        34.46753        27.12806   F   placebo  subject_85 #> 86   sample_86        66.31337        23.41492   M   placebo  subject_86 #> 87   sample_87        40.39360        29.08537   M treatment  subject_87 #> 88   sample_88        62.39948        32.09491   F treatment  subject_88 #> 89   sample_89        74.09104        31.62152   F   placebo  subject_89 #> 90   sample_90        40.56107        26.09232   M treatment  subject_90 #> 91   sample_91        62.01784        26.05689   M   placebo  subject_91 #> 92   sample_92        52.37803        27.48901   F   placebo  subject_92 #> 93   sample_93        39.27856        37.48030   M treatment  subject_93 #> 94   sample_94        39.85332        24.31348   F   placebo  subject_94 #> 95   sample_95        38.98464        29.10474   M   placebo  subject_95 #> 96   sample_96        49.69093        39.51181   F treatment  subject_96 #> 97   sample_97        40.38244        29.49513   M treatment  subject_97 #> 98   sample_98        61.87917        23.20080   M   placebo  subject_98 #> 99   sample_99        76.00109        26.67615   F treatment  subject_99 #> 100 sample_100        42.12970        32.42730   F treatment subject_100 simulate_data(n_samples = 100, block_size = 1) #>      sample_id age_at_baseline bmi_at_baseline sex treatment  subject_id #> 1     sample_1        57.53319        33.93869   F treatment   subject_1 #> 2     sample_2        54.71453        33.84521   F treatment   subject_2 #> 3     sample_3        54.57130        31.66101   F treatment   subject_3 #> 4     sample_4        68.68602        24.95812   F   placebo   subject_4 #> 5     sample_5        52.74229        29.40274   M treatment   subject_5 #> 6     sample_6        70.16471        28.59802   M   placebo   subject_6 #> 7     sample_7        39.51247        32.81495   M   placebo   subject_7 #> 8     sample_8        60.84614        28.13781   M   placebo   subject_8 #> 9     sample_9        56.23854        34.88487   F treatment   subject_9 #> 10   sample_10        57.15942        28.12710   M treatment  subject_10 #> 11   sample_11        58.79639        35.26356   F   placebo  subject_11 #> 12   sample_12        49.97677        24.75411   M   placebo  subject_12 #> 13   sample_13        51.66793        23.69922   F   placebo  subject_13 #> 14   sample_14        44.81425        46.20520   M treatment  subject_14 #> 15   sample_15        44.28209        27.91571   F   placebo  subject_15 #> 16   sample_16        58.03529        31.49114   F treatment  subject_16 #> 17   sample_17        59.48210        33.18285   F   placebo  subject_17 #> 18   sample_18        55.53004        27.58110   M treatment  subject_18 #> 19   sample_19        64.22267        32.58431   F treatment  subject_19 #> 20   sample_20        75.50085        31.84482   F treatment  subject_20 #> 21   sample_21        50.08969        28.92310   F treatment  subject_21 #> 22   sample_22        31.90831        30.32647   F   placebo  subject_22 #> 23   sample_23        65.05739        29.82966   M treatment  subject_23 #> 24   sample_24        47.90799        40.64226   F treatment  subject_24 #> 25   sample_25        48.11991        26.29332   M treatment  subject_25 #> 26   sample_26        65.25571        24.52002   F treatment  subject_26 #> 27   sample_27        52.15227        30.18894   M   placebo  subject_27 #> 28   sample_28        42.79282        31.55240   M   placebo  subject_28 #> 29   sample_29        56.81303        32.18262   M treatment  subject_29 #> 30   sample_30        53.61109        27.70817   M   placebo  subject_30 #> 31   sample_31        55.05764        24.68337   F treatment  subject_31 #> 32   sample_32        58.85280        36.31593   F   placebo  subject_32 #> 33   sample_33        51.29340        28.25175   F treatment  subject_33 #> 34   sample_34        61.44377        25.67244   M   placebo  subject_34 #> 35   sample_35        52.79513        28.81860   M   placebo  subject_35 #> 36   sample_36        58.31782        29.01412   F treatment  subject_36 #> 37   sample_37        65.96839        35.54960   F treatment  subject_37 #> 38   sample_38        59.35181        30.42369   F treatment  subject_38 #> 39   sample_39        51.74068        33.77027   F treatment  subject_39 #> 40   sample_40        66.48808        27.50354   M   placebo  subject_40 #> 41   sample_41        64.93504        31.07223   M treatment  subject_41 #> 42   sample_42        60.48397        28.37657   M   placebo  subject_42 #> 43   sample_43        57.38732        30.47292   F   placebo  subject_43 #> 44   sample_44        48.72094        25.52318   F treatment  subject_44 #> 45   sample_45        68.60652        23.44599   F treatment  subject_45 #> 46   sample_46        48.99740        39.98607   M treatment  subject_46 #> 47   sample_47        76.87333        33.00354   M treatment  subject_47 #> 48   sample_48        70.32611        23.74364   F   placebo  subject_48 #> 49   sample_49        52.64300        26.94417   F treatment  subject_49 #> 50   sample_50        44.73579        24.07260   M treatment  subject_50 #> 51   sample_51        47.89593        40.99405   F   placebo  subject_51 #> 52   sample_52        57.56884        36.56206   M treatment  subject_52 #> 53   sample_53        52.53308        28.67427   F treatment  subject_53 #> 54   sample_54        51.52457        32.71597   F treatment  subject_54 #> 55   sample_55        45.48381        27.92830   F treatment  subject_55 #> 56   sample_56        54.54972        27.61877   M   placebo  subject_56 #> 57   sample_57        47.15096        26.05699   F   placebo  subject_57 #> 58   sample_58        38.32058        27.02691   F treatment  subject_58 #> 59   sample_59        51.19773        38.25454   F   placebo  subject_59 #> 60   sample_60        64.18997        29.72986   F treatment  subject_60 #> 61   sample_61        49.24653        30.59623   M treatment  subject_61 #> 62   sample_62        61.07964        31.21844   F   placebo  subject_62 #> 63   sample_63        38.82117        36.16238   F   placebo  subject_63 #> 64   sample_64        54.44438        27.41968   M treatment  subject_64 #> 65   sample_65        60.19407        25.03746   F treatment  subject_65 #> 66   sample_66        58.01153        38.37848   F   placebo  subject_66 #> 67   sample_67        56.05676        27.79418   F treatment  subject_67 #> 68   sample_68        48.59294        26.38467   F treatment  subject_68 #> 69   sample_69        46.50296        23.81863   F treatment  subject_69 #> 70   sample_70        44.75871        23.57642   M treatment  subject_70 #> 71   sample_71        56.17647        27.13013   F   placebo  subject_71 #> 72   sample_72        45.52525        33.08993   M treatment  subject_72 #> 73   sample_73        50.09443        35.54924   F treatment  subject_73 #> 74   sample_74        52.43908        33.53794   M treatment  subject_74 #> 75   sample_75        73.43862        28.18171   M treatment  subject_75 #> 76   sample_76        48.48050        30.29875   F   placebo  subject_76 #> 77   sample_77        57.35387        26.47702   M   placebo  subject_77 #> 78   sample_78        55.77961        26.41391   F treatment  subject_78 #> 79   sample_79        45.38143        34.42325   F   placebo  subject_79 #> 80   sample_80        54.28692        24.92204   M   placebo  subject_80 #> 81   sample_81        69.44551        39.77647   M   placebo  subject_81 #> 82   sample_82        59.51504        29.54840   F   placebo  subject_82 #> 83   sample_83        55.41233        31.07269   M treatment  subject_83 #> 84   sample_84        50.77503        26.30736   M   placebo  subject_84 #> 85   sample_85        34.46753        27.12806   F   placebo  subject_85 #> 86   sample_86        66.31337        23.41492   M   placebo  subject_86 #> 87   sample_87        40.39360        29.08537   M treatment  subject_87 #> 88   sample_88        62.39948        32.09491   F treatment  subject_88 #> 89   sample_89        74.09104        31.62152   F   placebo  subject_89 #> 90   sample_90        40.56107        26.09232   M treatment  subject_90 #> 91   sample_91        62.01784        26.05689   M   placebo  subject_91 #> 92   sample_92        52.37803        27.48901   F   placebo  subject_92 #> 93   sample_93        39.27856        37.48030   M treatment  subject_93 #> 94   sample_94        39.85332        24.31348   F   placebo  subject_94 #> 95   sample_95        38.98464        29.10474   M   placebo  subject_95 #> 96   sample_96        49.69093        39.51181   F treatment  subject_96 #> 97   sample_97        40.38244        29.49513   M treatment  subject_97 #> 98   sample_98        61.87917        23.20080   M   placebo  subject_98 #> 99   sample_99        76.00109        26.67615   F treatment  subject_99 #> 100 sample_100        42.12970        32.42730   F treatment subject_100  # Generate data with multiple samples per subject simulate_data(n_samples = 102, block_size = 3) #>      sample_id age_at_baseline bmi_at_baseline sex sample_timepoint treatment #> 1     sample_1        35.33383        29.85727   F      timepoint_1 treatment #> 2     sample_2        35.33383        29.85727   F      timepoint_2 treatment #> 3     sample_3        35.33383        29.85727   F      timepoint_3 treatment #> 4     sample_4        62.01356        29.78565   F      timepoint_1 treatment #> 5     sample_5        62.01356        29.78565   F      timepoint_2 treatment #> 6     sample_6        62.01356        29.78565   F      timepoint_3 treatment #> 7     sample_7        50.27209        36.84301   F      timepoint_1 treatment #> 8     sample_8        50.27209        36.84301   F      timepoint_2 treatment #> 9     sample_9        50.27209        36.84301   F      timepoint_3 treatment #> 10   sample_10        44.32176        28.87115   F      timepoint_1   placebo #> 11   sample_11        44.32176        28.87115   F      timepoint_2   placebo #> 12   sample_12        44.32176        28.87115   F      timepoint_3   placebo #> 13   sample_13        52.82025        37.58235   M      timepoint_1 treatment #> 14   sample_14        52.82025        37.58235   M      timepoint_2 treatment #> 15   sample_15        52.82025        37.58235   M      timepoint_3 treatment #> 16   sample_16        44.73996        22.25624   M      timepoint_1   placebo #> 17   sample_17        44.73996        22.25624   M      timepoint_2   placebo #> 18   sample_18        44.73996        22.25624   M      timepoint_3   placebo #> 19   sample_19        47.71109        32.92307   M      timepoint_1   placebo #> 20   sample_20        47.71109        32.92307   M      timepoint_2   placebo #> 21   sample_21        47.71109        32.92307   M      timepoint_3   placebo #> 22   sample_22        48.74961        30.61927   F      timepoint_1   placebo #> 23   sample_23        48.74961        30.61927   F      timepoint_2   placebo #> 24   sample_24        48.74961        30.61927   F      timepoint_3   placebo #> 25   sample_25        38.13307        31.07971   F      timepoint_1 treatment #> 26   sample_26        38.13307        31.07971   F      timepoint_2 treatment #> 27   sample_27        38.13307        31.07971   F      timepoint_3 treatment #> 28   sample_28        63.37787        31.89820   F      timepoint_1 treatment #> 29   sample_29        63.37787        31.89820   F      timepoint_2 treatment #> 30   sample_30        63.37787        31.89820   F      timepoint_3 treatment #> 31   sample_31        56.53373        27.48838   F      timepoint_1   placebo #> 32   sample_32        56.53373        27.48838   F      timepoint_2   placebo #> 33   sample_33        56.53373        27.48838   F      timepoint_3   placebo #> 34   sample_34        43.61863        28.33396   M      timepoint_1   placebo #> 35   sample_35        43.61863        28.33396   M      timepoint_2   placebo #> 36   sample_36        43.61863        28.33396   M      timepoint_3   placebo #> 37   sample_37        67.53815        24.90712   M      timepoint_1   placebo #> 38   sample_38        67.53815        24.90712   M      timepoint_2   placebo #> 39   sample_39        67.53815        24.90712   M      timepoint_3   placebo #> 40   sample_40        59.26464        24.64104   M      timepoint_1 treatment #> 41   sample_41        59.26464        24.64104   M      timepoint_2 treatment #> 42   sample_42        59.26464        24.64104   M      timepoint_3 treatment #> 43   sample_43        52.04929        31.51764   M      timepoint_1   placebo #> 44   sample_44        52.04929        31.51764   M      timepoint_2   placebo #> 45   sample_45        52.04929        31.51764   M      timepoint_3   placebo #> 46   sample_46        63.95126        32.24105   F      timepoint_1 treatment #> 47   sample_47        63.95126        32.24105   F      timepoint_2 treatment #> 48   sample_48        63.95126        32.24105   F      timepoint_3 treatment #> 49   sample_49        63.78133        30.26502   F      timepoint_1   placebo #> 50   sample_50        63.78133        30.26502   F      timepoint_2   placebo #> 51   sample_51        63.78133        30.26502   F      timepoint_3   placebo #> 52   sample_52        63.21581        34.61134   M      timepoint_1 treatment #> 53   sample_53        63.21581        34.61134   M      timepoint_2 treatment #> 54   sample_54        63.21581        34.61134   M      timepoint_3 treatment #> 55   sample_55        61.88640        40.25042   M      timepoint_1 treatment #> 56   sample_56        61.88640        40.25042   M      timepoint_2 treatment #> 57   sample_57        61.88640        40.25042   M      timepoint_3 treatment #> 58   sample_58        60.53918        27.54484   F      timepoint_1 treatment #> 59   sample_59        60.53918        27.54484   F      timepoint_2 treatment #> 60   sample_60        60.53918        27.54484   F      timepoint_3 treatment #> 61   sample_61        54.38088        18.45416   F      timepoint_1 treatment #> 62   sample_62        54.38088        18.45416   F      timepoint_2 treatment #> 63   sample_63        54.38088        18.45416   F      timepoint_3 treatment #> 64   sample_64        51.94037        35.02869   M      timepoint_1   placebo #> 65   sample_65        51.94037        35.02869   M      timepoint_2   placebo #> 66   sample_66        51.94037        35.02869   M      timepoint_3   placebo #> 67   sample_67        51.19529        26.45400   M      timepoint_1 treatment #> 68   sample_68        51.19529        26.45400   M      timepoint_2 treatment #> 69   sample_69        51.19529        26.45400   M      timepoint_3 treatment #> 70   sample_70        48.05293        26.55996   F      timepoint_1 treatment #> 71   sample_71        48.05293        26.55996   F      timepoint_2 treatment #> 72   sample_72        48.05293        26.55996   F      timepoint_3 treatment #> 73   sample_73        52.92083        35.12786   F      timepoint_1 treatment #> 74   sample_74        52.92083        35.12786   F      timepoint_2 treatment #> 75   sample_75        52.92083        35.12786   F      timepoint_3 treatment #> 76   sample_76        42.34604        28.57613   M      timepoint_1 treatment #> 77   sample_77        42.34604        28.57613   M      timepoint_2 treatment #> 78   sample_78        42.34604        28.57613   M      timepoint_3 treatment #> 79   sample_79        76.68956        23.89641   M      timepoint_1   placebo #> 80   sample_80        76.68956        23.89641   M      timepoint_2   placebo #> 81   sample_81        76.68956        23.89641   M      timepoint_3   placebo #> 82   sample_82        67.07962        30.90652   F      timepoint_1   placebo #> 83   sample_83        67.07962        30.90652   F      timepoint_2   placebo #> 84   sample_84        67.07962        30.90652   F      timepoint_3   placebo #> 85   sample_85        43.76891        29.30554   M      timepoint_1 treatment #> 86   sample_86        43.76891        29.30554   M      timepoint_2 treatment #> 87   sample_87        43.76891        29.30554   M      timepoint_3 treatment #> 88   sample_88        50.97115        30.02882   F      timepoint_1   placebo #> 89   sample_89        50.97115        30.02882   F      timepoint_2   placebo #> 90   sample_90        50.97115        30.02882   F      timepoint_3   placebo #> 91   sample_91        50.33345        31.92640   F      timepoint_1 treatment #> 92   sample_92        50.33345        31.92640   F      timepoint_2 treatment #> 93   sample_93        50.33345        31.92640   F      timepoint_3 treatment #> 94   sample_94        62.79965        28.14670   F      timepoint_1   placebo #> 95   sample_95        62.79965        28.14670   F      timepoint_2   placebo #> 96   sample_96        62.79965        28.14670   F      timepoint_3   placebo #> 97   sample_97        54.16631        33.22188   F      timepoint_1 treatment #> 98   sample_98        54.16631        33.22188   F      timepoint_2 treatment #> 99   sample_99        54.16631        33.22188   F      timepoint_3 treatment #> 100 sample_100        57.53319        28.89757   M      timepoint_1   placebo #> 101 sample_101        57.53319        28.89757   M      timepoint_2   placebo #> 102 sample_102        57.53319        28.89757   M      timepoint_3   placebo #>     subject_id #> 1    subject_1 #> 2    subject_1 #> 3    subject_1 #> 4    subject_2 #> 5    subject_2 #> 6    subject_2 #> 7    subject_3 #> 8    subject_3 #> 9    subject_3 #> 10   subject_4 #> 11   subject_4 #> 12   subject_4 #> 13   subject_5 #> 14   subject_5 #> 15   subject_5 #> 16   subject_6 #> 17   subject_6 #> 18   subject_6 #> 19   subject_7 #> 20   subject_7 #> 21   subject_7 #> 22   subject_8 #> 23   subject_8 #> 24   subject_8 #> 25   subject_9 #> 26   subject_9 #> 27   subject_9 #> 28  subject_10 #> 29  subject_10 #> 30  subject_10 #> 31  subject_11 #> 32  subject_11 #> 33  subject_11 #> 34  subject_12 #> 35  subject_12 #> 36  subject_12 #> 37  subject_13 #> 38  subject_13 #> 39  subject_13 #> 40  subject_14 #> 41  subject_14 #> 42  subject_14 #> 43  subject_15 #> 44  subject_15 #> 45  subject_15 #> 46  subject_16 #> 47  subject_16 #> 48  subject_16 #> 49  subject_17 #> 50  subject_17 #> 51  subject_17 #> 52  subject_18 #> 53  subject_18 #> 54  subject_18 #> 55  subject_19 #> 56  subject_19 #> 57  subject_19 #> 58  subject_20 #> 59  subject_20 #> 60  subject_20 #> 61  subject_21 #> 62  subject_21 #> 63  subject_21 #> 64  subject_22 #> 65  subject_22 #> 66  subject_22 #> 67  subject_23 #> 68  subject_23 #> 69  subject_23 #> 70  subject_24 #> 71  subject_24 #> 72  subject_24 #> 73  subject_25 #> 74  subject_25 #> 75  subject_25 #> 76  subject_26 #> 77  subject_26 #> 78  subject_26 #> 79  subject_27 #> 80  subject_27 #> 81  subject_27 #> 82  subject_28 #> 83  subject_28 #> 84  subject_28 #> 85  subject_29 #> 86  subject_29 #> 87  subject_29 #> 88  subject_30 #> 89  subject_30 #> 90  subject_30 #> 91  subject_31 #> 92  subject_31 #> 93  subject_31 #> 94  subject_32 #> 95  subject_32 #> 96  subject_32 #> 97  subject_33 #> 98  subject_33 #> 99  subject_33 #> 100 subject_34 #> 101 subject_34 #> 102 subject_34"},{"path":[]},{"path":"https://john-mulvey.github.io/SampleAllocateR/news/index.html","id":"sampleallocater-0009000","dir":"Changelog","previous_headings":"","what":"SampleAllocateR 0.0.0.9000","title":"SampleAllocateR 0.0.0.9000","text":"Pre-release candidate.","code":""}]
