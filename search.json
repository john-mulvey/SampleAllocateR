[{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"methods_for_sample_allocation_to_batches","text":"Especially costs performing assays decreased, move analysing samples carefully controlled experiments analysing samples directly patient population interest. Controlled experiments performed experimental model systems order covariates can held constant across experimental units, whereas clinical samples commonly number covariates also impact upon dependent variable interest. Performing assays large number samples requires analysed batches, results technical variation accounted analysis. demonstrate tool allocate pre-selectedsamples technical batches way maximises balance specified covariates. maximising ability estimate effects batch specified covaraites, facilitates best estimation effect dependent variable interest.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"generate-some-simulated-data-with-covarirates","dir":"Articles","previous_headings":"Introduction","what":"Generate some simulated data with covarirates","title":"methods_for_sample_allocation_to_batches","text":"First, generate simulated data covariates. generate 98 samples 3 covariates, allocate samples batches 13.","code":"toy_data = simulate_data(n_samples = 98, block_size = 2)  head(toy_data) #>   sample_id covariate1  covariate2 covariate3 block_id #> 1   Sample1  0.2875775 -0.08336907          C  block_1 #> 2   Sample2  0.7883051  0.25331851          B  block_1 #> 3   Sample3  0.4089769 -0.02854676          B  block_2 #> 4   Sample4  0.8830174 -0.04287046          B  block_2 #> 5   Sample5  0.9404673  1.36860228          C  block_3 #> 6   Sample6  0.0455565 -0.22577099          A  block_3"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"randomisation","dir":"Articles","previous_headings":"Introduction","what":"Randomisation","title":"methods_for_sample_allocation_to_batches","text":"common approach reported analysis clinical samples simply randomise samples different batches. Randomisation frequently used clinical trials ensure treatment groups balanced respect known unknown covariates. circumstance, covariates patients known time treatments allocated best chance ensure treatment groups balanced respect covariates. statistical terms, bias: expectation value given covariates equal control treatment group: .e. repeated experiment many times, average value covariate groups. can simply generate single random layout toy dataset 98 samples batch size 13 follows: function allocate_samples returns list layout samples batches layout slot probability covaraite differ batches (appropriate continuous categorical variables depending upon input data type) results slot. can assess balance layout across specified covariates calculating joint probability differ batches. Since probabilities multiplicative, calcluate simply product individual probabilities covariate differ batches. can see joint probability covariates differ batches low, despite fact layout generated randomly. order get overview good single random layout , can generate large number random layouts examine distribution joint probability covariates differ batches. can seen documentation, allocate_samples() function inculdes random seed reproducibility, explicitly set series different random seeds. expected, observe uniform distribution single varaible - note still many layouts low probability covariate differ batches.  “brute force” approach allocating samples batches simply select best layout random layouts. implemented allocate_samples function using method = \"best_random\" argument demonstration purposes (though note due use different random seeds, layout may differ generated ). , generate 1000 random layouts select one best balance covariates. , balance layout across specified covariates assessed calculating joint probability differ batches. can see best random layout clearly superior layout common practice performing single randomisation .","code":"single_layout = allocate_samples(toy_data,                                  batch_size = 13,                                  covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                  method = \"random\",                                  blocking_variable = NA) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98 #> Joining with `by = join_by(covariate1, covariate2, covariate3, #> sample_id)`  head(single_layout) #> $layout #>       covariate1   covariate2 covariate3 sample_id batch_allocation block_id #> 1   0.2875775201 -0.083369066          C   Sample1                7  block_1 #> 2   0.7883051354  0.253318514          B   Sample2                7  block_1 #> 3   0.4089769218 -0.028546755          B   Sample3                3  block_2 #> 4   0.8830174040 -0.042870457          B   Sample4                6  block_2 #> 5   0.9404672843  1.368602284          C   Sample5                3  block_3 #> 6   0.0455564994 -0.225770986          A   Sample6                2  block_3 #> 7   0.5281054880  1.516470604          B   Sample7                2  block_4 #> 8   0.8924190444 -1.548752804          B   Sample8                3  block_4 #> 9   0.5514350145  0.584613750          A   Sample9                5  block_5 #> 10  0.4566147353  0.123854244          B  Sample10                1  block_5 #> 11  0.9568333453  0.215941569          A  Sample11                2  block_6 #> 12  0.4533341562  0.379639483          A  Sample12                3  block_6 #> 13  0.6775706355 -0.502323453          B  Sample13                5  block_7 #> 14  0.5726334020 -0.333207384          C  Sample14                5  block_7 #> 15  0.1029246827 -1.018575383          A  Sample15                1  block_8 #> 16  0.8998249704 -1.071791226          C  Sample16                1  block_8 #> 17  0.2460877344  0.303528641          A  Sample17                8  block_9 #> 18  0.0420595335  0.448209779          B  Sample18                2  block_9 #> 19  0.3279207193  0.053004227          A  Sample19                7 block_10 #> 20  0.9545036491  0.922267468          B  Sample20                3 block_10 #> 21  0.8895393161  2.050084686          B  Sample21                1 block_11 #> 22  0.6928034062 -0.491031166          B  Sample22                3 block_11 #> 23  0.6405068138 -2.309168876          C  Sample23                4 block_12 #> 24  0.9942697766  1.005738524          A  Sample24                6 block_12 #> 25  0.6557057991 -0.709200763          A  Sample25                1 block_13 #> 26  0.7085304682 -0.688008616          A  Sample26                4 block_13 #> 27  0.5440660247  1.025571370          A  Sample27                7 block_14 #> 28  0.5941420204 -0.284773007          C  Sample28                8 block_14 #> 29  0.2891597373 -1.220717712          A  Sample29                6 block_15 #> 30  0.1471136473  0.181303480          B  Sample30                4 block_15 #> 31  0.9630242325 -0.138891362          A  Sample31                1 block_16 #> 32  0.9022990451  0.005764186          B  Sample32                7 block_16 #> 33  0.6907052784  0.385280401          B  Sample33                3 block_17 #> 34  0.7954674177 -0.370660032          A  Sample34                4 block_17 #> 35  0.0246136845  0.644376549          A  Sample35                5 block_18 #> 36  0.4777959711 -0.220486562          A  Sample36                7 block_18 #> 37  0.7584595375  0.331781964          A  Sample37                6 block_19 #> 38  0.2164079358  1.096839013          C  Sample38                8 block_19 #> 39  0.3181810076  0.435181491          A  Sample39                6 block_20 #> 40  0.2316257854 -0.325931586          A  Sample40                2 block_20 #> 41  0.1428000224  1.148807618          A  Sample41                5 block_21 #> 42  0.4145463358  0.993503856          B  Sample42                5 block_21 #> 43  0.4137243263  0.548396960          B  Sample43                8 block_22 #> 44  0.3688454509  0.238731735          C  Sample44                4 block_22 #> 45  0.1524447477 -0.627906076          B  Sample45                5 block_23 #> 46  0.1388060634  1.360652449          C  Sample46                2 block_23 #> 47  0.2330340995 -0.600259587          A  Sample47                1 block_24 #> 48  0.4659624503  2.187332993          A  Sample48                6 block_24 #> 49  0.2659726404  1.532610626          A  Sample49                4 block_25 #> 50  0.8578277153 -0.235700359          A  Sample50                7 block_25 #> 51  0.0458311667 -1.026420900          A  Sample51                2 block_26 #> 52  0.4422000742 -0.710406564          C  Sample52                5 block_26 #> 53  0.7989248456  0.256883709          A  Sample53                1 block_27 #> 54  0.1218992600 -0.246691878          A  Sample54                2 block_27 #> 55  0.5609479838 -0.347542599          C  Sample55                7 block_28 #> 56  0.2065313896 -0.951618567          C  Sample56                7 block_28 #> 57  0.1275316502 -0.045027725          B  Sample57                8 block_29 #> 58  0.7533078643 -0.784904469          A  Sample58                8 block_29 #> 59  0.8950453592 -1.667941937          A  Sample59                6 block_30 #> 60  0.3744627759 -0.380226520          A  Sample60                6 block_30 #> 61  0.6651151946  0.918996609          B  Sample61                8 block_31 #> 62  0.0948406609 -0.575346963          A  Sample62                6 block_31 #> 63  0.3839696378  0.607964322          B  Sample63                6 block_32 #> 64  0.2743836446 -1.617882708          A  Sample64                5 block_32 #> 65  0.8146400389 -0.055561966          A  Sample65                7 block_33 #> 66  0.4485163414  0.519407204          C  Sample66                8 block_33 #> 67  0.8100643530  0.301153362          C  Sample67                1 block_34 #> 68  0.8123895095  0.105676194          B  Sample68                1 block_34 #> 69  0.7943423211 -0.640706008          B  Sample69                4 block_35 #> 70  0.4398316876 -0.849704346          A  Sample70                7 block_35 #> 71  0.7544751586 -1.024128791          C  Sample71                7 block_36 #> 72  0.6292211316  0.117646597          A  Sample72                7 block_36 #> 73  0.7101824014 -0.947474614          A  Sample73                4 block_37 #> 74  0.0006247733 -0.490557444          B  Sample74                6 block_37 #> 75  0.4753165741 -0.256092192          A  Sample75                2 block_38 #> 76  0.2201188852  1.843862005          B  Sample76                8 block_38 #> 77  0.3798165377 -0.651949902          B  Sample77                6 block_39 #> 78  0.6127710033  0.235386572          B  Sample78                1 block_39 #> 79  0.3517979092  0.077960850          B  Sample79                3 block_40 #> 80  0.1111354243 -0.961856634          C  Sample80                4 block_40 #> 81  0.2436194727 -0.071308086          C  Sample81                2 block_41 #> 82  0.6680555874  1.444550858          C  Sample82                5 block_41 #> 83  0.4176467797  0.451504053          C  Sample83                8 block_42 #> 84  0.7881958340  0.041232922          A  Sample84                1 block_42 #> 85  0.1028646443 -0.422496832          C  Sample85                8 block_43 #> 86  0.4348927415 -2.053247222          C  Sample86                4 block_43 #> 87  0.9849569800  1.131337213          C  Sample87                4 block_44 #> 88  0.8930511144 -1.460640071          B  Sample88                4 block_44 #> 89  0.8864690608  0.739947511          C  Sample89                5 block_45 #> 90  0.1750526503  1.909103569          C  Sample90                8 block_45 #> 91  0.1306956916 -1.443893161          C  Sample91                4 block_46 #> 92  0.6531019250  0.701784335          A  Sample92                3 block_46 #> 93  0.3435164723 -0.262197489          A  Sample93                2 block_47 #> 94  0.6567581280 -1.572144159          C  Sample94                2 block_47 #> 95  0.3203732425 -1.514667654          B  Sample95                8 block_48 #> 96  0.1876911193 -1.601536174          C  Sample96                3 block_48 #> 97  0.7822943013 -0.530906522          B  Sample97                3 block_49 #> 98  0.0935949867 -1.461755585          A  Sample98                5 block_49 #> 99            NA           NA       <NA>  padding1                2     <NA> #> 100           NA           NA       <NA>  padding2                3     <NA> #> 101           NA           NA       <NA>  padding3                5     <NA> #> 102           NA           NA       <NA>  padding4                1     <NA> #> 103           NA           NA       <NA>  padding5                6     <NA> #> 104           NA           NA       <NA>  padding6                3     <NA> #>  #> $results #> # A tibble: 3 × 2 #>   covariate  p_value #>   <chr>        <dbl> #> 1 covariate1  0.0175 #> 2 covariate2  0.484  #> 3 covariate3  0.0820 prod(single_layout[['results']]$p_value) #> [1] 0.0006938787 random_seeds <- sample(1:10000, 1000, replace = FALSE)  results_list <- lapply(random_seeds, function(seed) {   allocate_samples(toy_data,                    batch_size = 13,                    covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                    method = \"random\",                    blocking_variable = NA,                    seed = seed) })  # plot histrogram for a single covariate: covariate1 probability_covariate1 <- lapply(seq_along(results_list), function(i) {   data.frame(     iteration_number = i,     p_value = results_list[[i]][['results']] %>%       filter(covariate == \"covariate1\") %>%       pull(p_value)   ) }) plot_data_covariate1 <- do.call(rbind, probability_covariate1) # plot histrogram of probability that covariate1 does not differ between the batches plot_data_covariate1 %>%   ggplot(aes(x = p_value)) +   geom_histogram(binwidth = 0.01) best_random_layout = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                  iterations = 1000,                                  method = \"best_random\") #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98  #> Joint probability that the best layout is balanced: 0.7795554 #> Joining with `by = join_by(covariate1, covariate2, covariate3, #> sample_id)`  head(best_random_layout) #> $layout #>       covariate1   covariate2 covariate3 sample_id batch_allocation block_id #> 1   0.2875775201 -0.083369066          C   Sample1                2  block_1 #> 2   0.7883051354  0.253318514          B   Sample2                5  block_1 #> 3   0.4089769218 -0.028546755          B   Sample3                7  block_2 #> 4   0.8830174040 -0.042870457          B   Sample4                3  block_2 #> 5   0.9404672843  1.368602284          C   Sample5                3  block_3 #> 6   0.0455564994 -0.225770986          A   Sample6                5  block_3 #> 7   0.5281054880  1.516470604          B   Sample7                2  block_4 #> 8   0.8924190444 -1.548752804          B   Sample8                6  block_4 #> 9   0.5514350145  0.584613750          A   Sample9                6  block_5 #> 10  0.4566147353  0.123854244          B  Sample10                2  block_5 #> 11  0.9568333453  0.215941569          A  Sample11                8  block_6 #> 12  0.4533341562  0.379639483          A  Sample12                5  block_6 #> 13  0.6775706355 -0.502323453          B  Sample13                3  block_7 #> 14  0.5726334020 -0.333207384          C  Sample14                3  block_7 #> 15  0.1029246827 -1.018575383          A  Sample15                6  block_8 #> 16  0.8998249704 -1.071791226          C  Sample16                5  block_8 #> 17  0.2460877344  0.303528641          A  Sample17                6  block_9 #> 18  0.0420595335  0.448209779          B  Sample18                4  block_9 #> 19  0.3279207193  0.053004227          A  Sample19                3 block_10 #> 20  0.9545036491  0.922267468          B  Sample20                5 block_10 #> 21  0.8895393161  2.050084686          B  Sample21                4 block_11 #> 22  0.6928034062 -0.491031166          B  Sample22                5 block_11 #> 23  0.6405068138 -2.309168876          C  Sample23                7 block_12 #> 24  0.9942697766  1.005738524          A  Sample24                7 block_12 #> 25  0.6557057991 -0.709200763          A  Sample25                1 block_13 #> 26  0.7085304682 -0.688008616          A  Sample26                4 block_13 #> 27  0.5440660247  1.025571370          A  Sample27                1 block_14 #> 28  0.5941420204 -0.284773007          C  Sample28                1 block_14 #> 29  0.2891597373 -1.220717712          A  Sample29                2 block_15 #> 30  0.1471136473  0.181303480          B  Sample30                1 block_15 #> 31  0.9630242325 -0.138891362          A  Sample31                1 block_16 #> 32  0.9022990451  0.005764186          B  Sample32                5 block_16 #> 33  0.6907052784  0.385280401          B  Sample33                4 block_17 #> 34  0.7954674177 -0.370660032          A  Sample34                2 block_17 #> 35  0.0246136845  0.644376549          A  Sample35                2 block_18 #> 36  0.4777959711 -0.220486562          A  Sample36                1 block_18 #> 37  0.7584595375  0.331781964          A  Sample37                7 block_19 #> 38  0.2164079358  1.096839013          C  Sample38                3 block_19 #> 39  0.3181810076  0.435181491          A  Sample39                4 block_20 #> 40  0.2316257854 -0.325931586          A  Sample40                8 block_20 #> 41  0.1428000224  1.148807618          A  Sample41                5 block_21 #> 42  0.4145463358  0.993503856          B  Sample42                1 block_21 #> 43  0.4137243263  0.548396960          B  Sample43                8 block_22 #> 44  0.3688454509  0.238731735          C  Sample44                4 block_22 #> 45  0.1524447477 -0.627906076          B  Sample45                4 block_23 #> 46  0.1388060634  1.360652449          C  Sample46                5 block_23 #> 47  0.2330340995 -0.600259587          A  Sample47                3 block_24 #> 48  0.4659624503  2.187332993          A  Sample48                8 block_24 #> 49  0.2659726404  1.532610626          A  Sample49                1 block_25 #> 50  0.8578277153 -0.235700359          A  Sample50                1 block_25 #> 51  0.0458311667 -1.026420900          A  Sample51                4 block_26 #> 52  0.4422000742 -0.710406564          C  Sample52                5 block_26 #> 53  0.7989248456  0.256883709          A  Sample53                8 block_27 #> 54  0.1218992600 -0.246691878          A  Sample54                5 block_27 #> 55  0.5609479838 -0.347542599          C  Sample55                6 block_28 #> 56  0.2065313896 -0.951618567          C  Sample56                5 block_28 #> 57  0.1275316502 -0.045027725          B  Sample57                3 block_29 #> 58  0.7533078643 -0.784904469          A  Sample58                7 block_29 #> 59  0.8950453592 -1.667941937          A  Sample59                2 block_30 #> 60  0.3744627759 -0.380226520          A  Sample60                7 block_30 #> 61  0.6651151946  0.918996609          B  Sample61                3 block_31 #> 62  0.0948406609 -0.575346963          A  Sample62                1 block_31 #> 63  0.3839696378  0.607964322          B  Sample63                2 block_32 #> 64  0.2743836446 -1.617882708          A  Sample64                4 block_32 #> 65  0.8146400389 -0.055561966          A  Sample65                3 block_33 #> 66  0.4485163414  0.519407204          C  Sample66                7 block_33 #> 67  0.8100643530  0.301153362          C  Sample67                7 block_34 #> 68  0.8123895095  0.105676194          B  Sample68                3 block_34 #> 69  0.7943423211 -0.640706008          B  Sample69                4 block_35 #> 70  0.4398316876 -0.849704346          A  Sample70                6 block_35 #> 71  0.7544751586 -1.024128791          C  Sample71                4 block_36 #> 72  0.6292211316  0.117646597          A  Sample72                2 block_36 #> 73  0.7101824014 -0.947474614          A  Sample73                4 block_37 #> 74  0.0006247733 -0.490557444          B  Sample74                6 block_37 #> 75  0.4753165741 -0.256092192          A  Sample75                8 block_38 #> 76  0.2201188852  1.843862005          B  Sample76                8 block_38 #> 77  0.3798165377 -0.651949902          B  Sample77                8 block_39 #> 78  0.6127710033  0.235386572          B  Sample78                6 block_39 #> 79  0.3517979092  0.077960850          B  Sample79                7 block_40 #> 80  0.1111354243 -0.961856634          C  Sample80                6 block_40 #> 81  0.2436194727 -0.071308086          C  Sample81                8 block_41 #> 82  0.6680555874  1.444550858          C  Sample82                8 block_41 #> 83  0.4176467797  0.451504053          C  Sample83                5 block_42 #> 84  0.7881958340  0.041232922          A  Sample84                2 block_42 #> 85  0.1028646443 -0.422496832          C  Sample85                1 block_43 #> 86  0.4348927415 -2.053247222          C  Sample86                1 block_43 #> 87  0.9849569800  1.131337213          C  Sample87                4 block_44 #> 88  0.8930511144 -1.460640071          B  Sample88                8 block_44 #> 89  0.8864690608  0.739947511          C  Sample89                6 block_45 #> 90  0.1750526503  1.909103569          C  Sample90                7 block_45 #> 91  0.1306956916 -1.443893161          C  Sample91                2 block_46 #> 92  0.6531019250  0.701784335          A  Sample92                7 block_46 #> 93  0.3435164723 -0.262197489          A  Sample93                1 block_47 #> 94  0.6567581280 -1.572144159          C  Sample94                8 block_47 #> 95  0.3203732425 -1.514667654          B  Sample95                6 block_48 #> 96  0.1876911193 -1.601536174          C  Sample96                8 block_48 #> 97  0.7822943013 -0.530906522          B  Sample97                3 block_49 #> 98  0.0935949867 -1.461755585          A  Sample98                3 block_49 #> 99            NA           NA       <NA>  padding1                6     <NA> #> 100           NA           NA       <NA>  padding2                2     <NA> #> 101           NA           NA       <NA>  padding3                7     <NA> #> 102           NA           NA       <NA>  padding4                2     <NA> #> 103           NA           NA       <NA>  padding5                6     <NA> #> 104           NA           NA       <NA>  padding6                7     <NA> #>  #> $results #> # A tibble: 3 × 2 #>   covariate  p_value #>   <chr>        <dbl> #> 1 covariate1   0.945 #> 2 covariate2   0.868 #> 3 covariate3   0.951 prod(best_random_layout[['results']]$p_value) #> [1] 0.7795554"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"optimisation-methods-from-machine-learning","dir":"Articles","previous_headings":"Introduction","what":"Optimisation methods from machine learning","title":"methods_for_sample_allocation_to_batches","text":"Even processing capabilities modern desktop computers, brute force approaches problematic since number possible combinations quickly explodes. Since exhaustive search clearly impractical, therefore exploit machine learning optimisation approaches order maximise balance batches generated. Specifically utilise simulated annealing algorithm, heuristic optimisation method can efficiently approximate global optimum large search space. Interested readers directed towards general introduction wikipedia [wikipedia_2023a], practice method implemented default method using allocate samples different batches (can explicitly specified using argument method = \"simulated_annealing\").  clarity, return plot make easy user confirm simulated annealing algorithm run sufficient number iterations converge, seen ???saturation joint probability. Accordingly, also achieve balanced configuration best random layout within samller number iterations. can also compare run time simulated annealing algorithm best random layout.  addition generating balanced layout, see machine learning approach also achieves less run time.","code":"optimal_layout = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                  iterations = 300,                                  plot_convergence = TRUE) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98 #> Joint probability that the final layout is balanced: 0.9970577 #> Joining with `by = join_by(covariate1, covariate2, covariate3, #> sample_id)` prod(optimal_layout[['results']]$p_value) #> [1] 0.9960607 # rerun best_random_layout to calculate run time runtime_brute_force <- system.time({   best_random_layout <- allocate_samples(toy_data,                                           batch_size = 13,                                           covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                          iterations = 1000,                                          method = \"best_random\") }) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98  #> Joint probability that the best layout is balanced: 0.7795554 #> Joining with `by = join_by(covariate1, covariate2, covariate3, #> sample_id)`  # rerun optimal_layout to calculate run time runtime_optimal <- system.time({   optimal_layout <- allocate_samples(toy_data,                                       batch_size = 13,                                       covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                      #plot_convergence = FALSE,                                      iterations = 300) }) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98 #> Joint probability that the final layout is balanced: 0.9970577 #> Joining with `by = join_by(covariate1, covariate2, covariate3, #> sample_id)`  # plot run times data.frame(method = c(\"brute_force\", \"simulated_annealing\"),            time = c(runtime_brute_force, runtime_optimal)) %>%   ggplot(aes(x = method, y = time, fill = method)) +   geom_col()"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"blocking","dir":"Articles","previous_headings":"Introduction","what":"Blocking","title":"methods_for_sample_allocation_to_batches","text":"adage design experiments, commonly attributed George Box, “block can, randomise ”. discussed limitations randomisation situations covariates samples already known advance. However, advice block variables still relevant, also implement functionality block samples within batches specified variable. can performed follows:","code":"optimal_layout_blocked = allocate_samples(toy_data,                                   batch_size = 13,                                   covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                  blocking_variable = \"block_id\",                                  iterations = 1000,                                  method = \"simulated_annealing\") #> Blocking variable:  block_id  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 98 #> Joint probability that the final layout is balanced: 0.999972 #> Joining with `by = join_by(covariate1, covariate2, covariate3, block_id, #> sample_id)`"},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"plot-an-overview-of-the-layout","dir":"Articles","previous_headings":"Introduction","what":"plot an overview of the layout","title":"methods_for_sample_allocation_to_batches","text":"order easily get overview balance particular layout, provide simple function plot levels covariates across batches.","code":"plot_layout(optimal_layout_blocked, covariates = c(\"covariate1\", \"covariate2\", \"covariate3\")) #> Warning: Removed 12 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://john-mulvey.github.io/SampleAllocateR/articles/methods_for_sample_allocation_to_batches.html","id":"session-info","dir":"Articles","previous_headings":"","what":"session info","title":"methods_for_sample_allocation_to_batches","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.1              dplyr_1.1.4                #> [3] SampleAllocateR_0.0.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6      jsonlite_1.8.9    highr_0.11        compiler_4.4.1    #>  [5] tidyselect_1.2.1  tidyr_1.3.1       jquerylib_0.1.4   systemfonts_1.1.0 #>  [9] scales_1.3.0      textshaping_0.4.0 yaml_2.3.10       fastmap_1.2.0     #> [13] R6_2.5.1          labeling_0.4.3    generics_0.1.3    knitr_1.48        #> [17] tibble_3.2.1      desc_1.4.3        munsell_0.5.1     bslib_0.8.0       #> [21] pillar_1.9.0      rlang_1.1.4       utf8_1.2.4        cachem_1.1.0      #> [25] xfun_0.48         fs_1.6.4          sass_0.4.9        cli_3.6.3         #> [29] withr_3.0.2       pkgdown_2.1.1     magrittr_2.0.3    digest_0.6.37     #> [33] grid_4.4.1        lifecycle_1.0.4   vctrs_0.6.5       evaluate_1.0.1    #> [37] glue_1.8.0        farver_2.1.2      ragg_1.3.3        fansi_1.0.6       #> [41] colorspace_2.1-1  purrr_1.0.2       rmarkdown_2.28    tools_4.4.1       #> [45] pkgconfig_2.0.3   htmltools_0.5.8.1"},{"path":"https://john-mulvey.github.io/SampleAllocateR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Mulvey. Author, maintainer.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mulvey J (2024). SampleAllocateR: Covariate Balanced Allocation Preselected Samples Experimental Batches. R package version 0.0.0.9000, https://john-mulvey.github.io/SampleAllocateR/.","code":"@Manual{,   title = {SampleAllocateR: Covariate Balanced Allocation of Preselected Samples to Experimental Batches},   author = {John Mulvey},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://john-mulvey.github.io/SampleAllocateR/}, }"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate Samples to Batches Using Specified Method — allocate_samples","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"function allocates samples batches based specified method, can random allocation, best random allocation, simulated annealing. supports optional blocking handles various types covariates.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"","code":"allocate_samples(   data,   id_column = \"sample_id\",   method = \"simulated_annealing\",   covariates,   blocking_variable = NA,   batch_size,   iterations = 1000,   temperature = 1,   cooling_rate = 0.975,   seed = 123,   plot_convergence = TRUE )"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"data data.frame containing dataset processed. id_column string specifying column name data contains sample IDs. default \"sample_id\". method string specifying allocation method used. Valid options \"random\", \"best_random\", \"simulated_annealing\". default \"simulated_annealing\". covariates character vector listing names covariate columns data considered allocation. blocking_variable optional string specifying name column used blocking variable. provided NA, blocking applied. batch_size integer specifying size batch. iterations integer specifying number iterations run \"best_random\" \"simulated_annealing\" methods. default 1000. temperature numeric specifying initial temperature simulated annealing method. default 1. cooling_rate numeric specifying cooling rate simulated annealing method. default 0.975. seed integer used setting seed ensure reproducibility. default 123. plot_convergence = TRUE logical indicating whether plot convergence optimisation process, relevant method specified \"simulated_annealing\". default TRUE.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"object containing allocation layout samples batches, along specified blocking covariate adjustments. exact structure return value depends allocation method used.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"function first checks validity specified method parameters, preprocesses data according specified covariates blocking variable. applies specified allocation method assign samples batches, aiming balance distribution covariates , applicable, blocking levels across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/allocate_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate Samples to Batches Using Specified Method — allocate_samples","text":"","code":"# Allocate samples using simulated annealing without blocking my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 100   #> Joint probability that the final layout is balanced: 0.9999991  #> Joining with `by = join_by(covariate1, covariate2, covariate3, sample_id)`"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Significant Covariates in Output — check_significance","title":"Check for Significant Covariates in Output — check_significance","text":"function evaluates significance covariates based adjusted p-values. applies Bonferroni correction p-values associated covariate identifies statistically significant. recommend using function conduct hypothesis testing, instead sanity check identify covariates may potentially problematic.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Significant Covariates in Output — check_significance","text":"","code":"check_significance(output)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Significant Covariates in Output — check_significance","text":"output list similar object expected contain results data frame. results data frame least two columns: covariate name covariate p_value associated p-value statistical test.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Significant Covariates in Output — check_significance","text":"data frame listing covariates found statistically significant adjusting p-values multiple testing. covariates found significant, function return empty data frame. return data frame includes columns covariate name count significant instances, although count typically one listed covariate unless input output structure allows duplicate covariate names.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for Significant Covariates in Output — check_significance","text":"function first retrieves results data frame provided output object. calculates adjusted p-values using Bonferroni correction method. Covariates adjusted p-values less 0.05 considered statistically significant. function outputs names significant covariates counts.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/check_significance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Significant Covariates in Output — check_significance","text":"","code":"my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 100   #> Joint probability that the final layout is balanced: 0.9999991  #> Joining with `by = join_by(covariate1, covariate2, covariate3, sample_id)`                                     significant_covariates <- check_significance(allocated_data) #> No significant covariates"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Layout of Samples by Covariate Type — plot_layout","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"function generates two types plots given layout: one continuous covariates another categorical covariates. visualizes samples allocated across batches, separate plots covariate.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"","code":"plot_layout(output, id_column = \"sample_id\", covariates)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"output lsit created allocate_samples(), containing item called layout  data.frame containing layout information, including sample IDs, batch allocation, covariates. batch_allocation column expected indicate batch sample assigned , covariates can numeric factor type. id_column name column layout data frame contains sample IDs. default value \"sample_id\". covariates character vector covariate names visualized. default value NULL, visualize covariates layout data frame.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"function return object; instead, directly prints two plots R graphics device. first plot visualizes distribution continuous covariates across batches, using scatter plot covariate. second plot shows distribution categorical covariates using bar plot covariate level across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"function first processes layout separate continuous categorical covariates. continuous covariates, creates scatter plot showing value covariate batch. categorical covariates, aggregates data count number samples category batch creates bar plot. plots faceted covariate provide clear comparative view distribution across batches.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/plot_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Layout of Samples by Covariate Type — plot_layout","text":"","code":"my_data = simulate_data(n_samples = 100)  allocated_data <- allocate_samples(data = my_data,                                    id_column = \"sample_id\",                                    method = \"simulated_annealing\",                                    covariates = c(\"covariate1\", \"covariate2\", \"covariate3\"),                                    batch_size = 13) #> No blocking variable specified.  #> Covariate: covariate1 - continuous #> Covariate: covariate2 - continuous #> Covariate: covariate3 - categorical #> Number of samples: 100   #> Joint probability that the final layout is balanced: 0.9999991  #> Joining with `by = join_by(covariate1, covariate2, covariate3, sample_id)`  plot_layout(allocated_data, covariates = c(\"covariate1\", \"covariate2\", \"covariate3\")) #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data with Optional Blocking — simulate_data","title":"Simulate Data with Optional Blocking — simulate_data","text":"function generates simulated dataset containing specified number samples. Users can optionally specify block sizes group samples blocks. total number samples multiple block size, additional samples generated complete last block.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data with Optional Blocking — simulate_data","text":"","code":"simulate_data(n_samples, block_size = NA, seed = 123)"},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data with Optional Blocking — simulate_data","text":"n_samples Integer; number samples generate. block_size specified n_samples multiple block_size, function generate additional samples ensure blocks complete. block_size Integer; size block blocking variable creation. NA (default), blocking applied. specified, block_size must positive integer, function create blocking variable group samples blocks size. seed Integer; seed random number generation ensure reproducibility.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data with Optional Blocking — simulate_data","text":"data.frame columns sample ID, three covariates (covariate1, covariate2, covariate3), , block_size specified, block_id column. first two covariates generated uniform normal distributions, respectively, third categorical variable levels \"\", \"B\", \"C\". blocking applied, block_id column indicates block sample belongs.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Data with Optional Blocking — simulate_data","text":"function allows simulation data without blocking. block_size provided, ensures data divided blocks specified size, potentially increasing total number samples meet requirement. particularly useful simulations analyses concept blocks relevant.","code":""},{"path":"https://john-mulvey.github.io/SampleAllocateR/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data with Optional Blocking — simulate_data","text":"","code":"# Generate a dataset without blocking simulate_data(n_samples = 100) #>     sample_id   covariate1   covariate2 covariate3 #> 1     Sample1 0.2875775201  0.253318514          B #> 2     Sample2 0.7883051354 -0.028546755          B #> 3     Sample3 0.4089769218 -0.042870457          A #> 4     Sample4 0.8830174040  1.368602284          B #> 5     Sample5 0.9404672843 -0.225770986          A #> 6     Sample6 0.0455564994  1.516470604          A #> 7     Sample7 0.5281054880 -1.548752804          B #> 8     Sample8 0.8924190444  0.584613750          C #> 9     Sample9 0.5514350145  0.123854244          A #> 10   Sample10 0.4566147353  0.215941569          C #> 11   Sample11 0.9568333453  0.379639483          A #> 12   Sample12 0.4533341562 -0.502323453          B #> 13   Sample13 0.6775706355 -0.333207384          A #> 14   Sample14 0.5726334020 -1.018575383          B #> 15   Sample15 0.1029246827 -1.071791226          B #> 16   Sample16 0.8998249704  0.303528641          B #> 17   Sample17 0.2460877344  0.448209779          C #> 18   Sample18 0.0420595335  0.053004227          A #> 19   Sample19 0.3279207193  0.922267468          A #> 20   Sample20 0.9545036491  2.050084686          A #> 21   Sample21 0.8895393161 -0.491031166          A #> 22   Sample22 0.6928034062 -2.309168876          C #> 23   Sample23 0.6405068138  1.005738524          A #> 24   Sample24 0.9942697766 -0.709200763          B #> 25   Sample25 0.6557057991 -0.688008616          A #> 26   Sample26 0.7085304682  1.025571370          B #> 27   Sample27 0.5440660247 -0.284773007          B #> 28   Sample28 0.5941420204 -1.220717712          A #> 29   Sample29 0.2891597373  0.181303480          A #> 30   Sample30 0.1471136473 -0.138891362          A #> 31   Sample31 0.9630242325  0.005764186          A #> 32   Sample32 0.9022990451  0.385280401          C #> 33   Sample33 0.6907052784 -0.370660032          A #> 34   Sample34 0.7954674177  0.644376549          A #> 35   Sample35 0.0246136845 -0.220486562          A #> 36   Sample36 0.4777959711  0.331781964          B #> 37   Sample37 0.7584595375  1.096839013          B #> 38   Sample38 0.2164079358  0.435181491          C #> 39   Sample39 0.3181810076 -0.325931586          B #> 40   Sample40 0.2316257854  1.148807618          C #> 41   Sample41 0.1428000224  0.993503856          A #> 42   Sample42 0.4145463358  0.548396960          A #> 43   Sample43 0.4137243263  0.238731735          A #> 44   Sample44 0.3688454509 -0.627906076          A #> 45   Sample45 0.1524447477  1.360652449          A #> 46   Sample46 0.1388060634 -0.600259587          C #> 47   Sample47 0.2330340995  2.187332993          A #> 48   Sample48 0.4659624503  1.532610626          A #> 49   Sample49 0.2659726404 -0.235700359          C #> 50   Sample50 0.8578277153 -1.026420900          C #> 51   Sample51 0.0458311667 -0.710406564          B #> 52   Sample52 0.4422000742  0.256883709          A #> 53   Sample53 0.7989248456 -0.246691878          A #> 54   Sample54 0.1218992600 -0.347542599          A #> 55   Sample55 0.5609479838 -0.951618567          B #> 56   Sample56 0.2065313896 -0.045027725          A #> 57   Sample57 0.1275316502 -0.784904469          B #> 58   Sample58 0.7533078643 -1.667941937          A #> 59   Sample59 0.8950453592 -0.380226520          A #> 60   Sample60 0.3744627759  0.918996609          C #> 61   Sample61 0.6651151946 -0.575346963          C #> 62   Sample62 0.0948406609  0.607964322          B #> 63   Sample63 0.3839696378 -1.617882708          B #> 64   Sample64 0.2743836446 -0.055561966          A #> 65   Sample65 0.8146400389  0.519407204          C #> 66   Sample66 0.4485163414  0.301153362          A #> 67   Sample67 0.8100643530  0.105676194          A #> 68   Sample68 0.8123895095 -0.640706008          B #> 69   Sample69 0.7943423211 -0.849704346          A #> 70   Sample70 0.4398316876 -1.024128791          B #> 71   Sample71 0.7544751586  0.117646597          B #> 72   Sample72 0.6292211316 -0.947474614          B #> 73   Sample73 0.7101824014 -0.490557444          B #> 74   Sample74 0.0006247733 -0.256092192          C #> 75   Sample75 0.4753165741  1.843862005          C #> 76   Sample76 0.2201188852 -0.651949902          C #> 77   Sample77 0.3798165377  0.235386572          C #> 78   Sample78 0.6127710033  0.077960850          A #> 79   Sample79 0.3517979092 -0.961856634          C #> 80   Sample80 0.1111354243 -0.071308086          C #> 81   Sample81 0.2436194727  1.444550858          C #> 82   Sample82 0.6680555874  0.451504053          B #> 83   Sample83 0.4176467797  0.041232922          C #> 84   Sample84 0.7881958340 -0.422496832          C #> 85   Sample85 0.1028646443 -2.053247222          C #> 86   Sample86 0.4348927415  1.131337213          A #> 87   Sample87 0.9849569800 -1.460640071          A #> 88   Sample88 0.8930511144  0.739947511          C #> 89   Sample89 0.8864690608  1.909103569          B #> 90   Sample90 0.1750526503 -1.443893161          C #> 91   Sample91 0.1306956916  0.701784335          B #> 92   Sample92 0.6531019250 -0.262197489          A #> 93   Sample93 0.3435164723 -1.572144159          B #> 94   Sample94 0.6567581280 -1.514667654          B #> 95   Sample95 0.3203732425 -1.601536174          B #> 96   Sample96 0.1876911193 -0.530906522          A #> 97   Sample97 0.7822943013 -1.461755585          A #> 98   Sample98 0.0935949867  0.687916773          A #> 99   Sample99 0.4667790416  2.100108941          C #> 100 Sample100 0.5115054599 -1.287030476          C  # Generate a dataset with blocking, block size of 10 simulate_data(n_samples = 95, block_size = 10) #> Warning: The number of samples is not a multiple of the block size. We currently require complete blocks, so will simualte more samples than specified #>     sample_id   covariate1   covariate2 covariate3 block_id #> 1     Sample1 0.2875775201  0.253318514          B  block_1 #> 2     Sample2 0.7883051354 -0.028546755          B  block_1 #> 3     Sample3 0.4089769218 -0.042870457          A  block_1 #> 4     Sample4 0.8830174040  1.368602284          B  block_1 #> 5     Sample5 0.9404672843 -0.225770986          A  block_1 #> 6     Sample6 0.0455564994  1.516470604          A  block_1 #> 7     Sample7 0.5281054880 -1.548752804          B  block_1 #> 8     Sample8 0.8924190444  0.584613750          C  block_1 #> 9     Sample9 0.5514350145  0.123854244          A  block_1 #> 10   Sample10 0.4566147353  0.215941569          C  block_1 #> 11   Sample11 0.9568333453  0.379639483          A  block_2 #> 12   Sample12 0.4533341562 -0.502323453          B  block_2 #> 13   Sample13 0.6775706355 -0.333207384          A  block_2 #> 14   Sample14 0.5726334020 -1.018575383          B  block_2 #> 15   Sample15 0.1029246827 -1.071791226          B  block_2 #> 16   Sample16 0.8998249704  0.303528641          B  block_2 #> 17   Sample17 0.2460877344  0.448209779          C  block_2 #> 18   Sample18 0.0420595335  0.053004227          A  block_2 #> 19   Sample19 0.3279207193  0.922267468          A  block_2 #> 20   Sample20 0.9545036491  2.050084686          A  block_2 #> 21   Sample21 0.8895393161 -0.491031166          A  block_3 #> 22   Sample22 0.6928034062 -2.309168876          C  block_3 #> 23   Sample23 0.6405068138  1.005738524          A  block_3 #> 24   Sample24 0.9942697766 -0.709200763          B  block_3 #> 25   Sample25 0.6557057991 -0.688008616          A  block_3 #> 26   Sample26 0.7085304682  1.025571370          B  block_3 #> 27   Sample27 0.5440660247 -0.284773007          B  block_3 #> 28   Sample28 0.5941420204 -1.220717712          A  block_3 #> 29   Sample29 0.2891597373  0.181303480          A  block_3 #> 30   Sample30 0.1471136473 -0.138891362          A  block_3 #> 31   Sample31 0.9630242325  0.005764186          A  block_4 #> 32   Sample32 0.9022990451  0.385280401          C  block_4 #> 33   Sample33 0.6907052784 -0.370660032          A  block_4 #> 34   Sample34 0.7954674177  0.644376549          A  block_4 #> 35   Sample35 0.0246136845 -0.220486562          A  block_4 #> 36   Sample36 0.4777959711  0.331781964          B  block_4 #> 37   Sample37 0.7584595375  1.096839013          B  block_4 #> 38   Sample38 0.2164079358  0.435181491          C  block_4 #> 39   Sample39 0.3181810076 -0.325931586          B  block_4 #> 40   Sample40 0.2316257854  1.148807618          C  block_4 #> 41   Sample41 0.1428000224  0.993503856          A  block_5 #> 42   Sample42 0.4145463358  0.548396960          A  block_5 #> 43   Sample43 0.4137243263  0.238731735          A  block_5 #> 44   Sample44 0.3688454509 -0.627906076          A  block_5 #> 45   Sample45 0.1524447477  1.360652449          A  block_5 #> 46   Sample46 0.1388060634 -0.600259587          C  block_5 #> 47   Sample47 0.2330340995  2.187332993          A  block_5 #> 48   Sample48 0.4659624503  1.532610626          A  block_5 #> 49   Sample49 0.2659726404 -0.235700359          C  block_5 #> 50   Sample50 0.8578277153 -1.026420900          C  block_5 #> 51   Sample51 0.0458311667 -0.710406564          B  block_6 #> 52   Sample52 0.4422000742  0.256883709          A  block_6 #> 53   Sample53 0.7989248456 -0.246691878          A  block_6 #> 54   Sample54 0.1218992600 -0.347542599          A  block_6 #> 55   Sample55 0.5609479838 -0.951618567          B  block_6 #> 56   Sample56 0.2065313896 -0.045027725          A  block_6 #> 57   Sample57 0.1275316502 -0.784904469          B  block_6 #> 58   Sample58 0.7533078643 -1.667941937          A  block_6 #> 59   Sample59 0.8950453592 -0.380226520          A  block_6 #> 60   Sample60 0.3744627759  0.918996609          C  block_6 #> 61   Sample61 0.6651151946 -0.575346963          C  block_7 #> 62   Sample62 0.0948406609  0.607964322          B  block_7 #> 63   Sample63 0.3839696378 -1.617882708          B  block_7 #> 64   Sample64 0.2743836446 -0.055561966          A  block_7 #> 65   Sample65 0.8146400389  0.519407204          C  block_7 #> 66   Sample66 0.4485163414  0.301153362          A  block_7 #> 67   Sample67 0.8100643530  0.105676194          A  block_7 #> 68   Sample68 0.8123895095 -0.640706008          B  block_7 #> 69   Sample69 0.7943423211 -0.849704346          A  block_7 #> 70   Sample70 0.4398316876 -1.024128791          B  block_7 #> 71   Sample71 0.7544751586  0.117646597          B  block_8 #> 72   Sample72 0.6292211316 -0.947474614          B  block_8 #> 73   Sample73 0.7101824014 -0.490557444          B  block_8 #> 74   Sample74 0.0006247733 -0.256092192          C  block_8 #> 75   Sample75 0.4753165741  1.843862005          C  block_8 #> 76   Sample76 0.2201188852 -0.651949902          C  block_8 #> 77   Sample77 0.3798165377  0.235386572          C  block_8 #> 78   Sample78 0.6127710033  0.077960850          A  block_8 #> 79   Sample79 0.3517979092 -0.961856634          C  block_8 #> 80   Sample80 0.1111354243 -0.071308086          C  block_8 #> 81   Sample81 0.2436194727  1.444550858          C  block_9 #> 82   Sample82 0.6680555874  0.451504053          B  block_9 #> 83   Sample83 0.4176467797  0.041232922          C  block_9 #> 84   Sample84 0.7881958340 -0.422496832          C  block_9 #> 85   Sample85 0.1028646443 -2.053247222          C  block_9 #> 86   Sample86 0.4348927415  1.131337213          A  block_9 #> 87   Sample87 0.9849569800 -1.460640071          A  block_9 #> 88   Sample88 0.8930511144  0.739947511          C  block_9 #> 89   Sample89 0.8864690608  1.909103569          B  block_9 #> 90   Sample90 0.1750526503 -1.443893161          C  block_9 #> 91   Sample91 0.1306956916  0.701784335          B block_10 #> 92   Sample92 0.6531019250 -0.262197489          A block_10 #> 93   Sample93 0.3435164723 -1.572144159          B block_10 #> 94   Sample94 0.6567581280 -1.514667654          B block_10 #> 95   Sample95 0.3203732425 -1.601536174          B block_10 #> 96   Sample96 0.1876911193 -0.530906522          A block_10 #> 97   Sample97 0.7822943013 -1.461755585          A block_10 #> 98   Sample98 0.0935949867  0.687916773          A block_10 #> 99   Sample99 0.4667790416  2.100108941          C block_10 #> 100 Sample100 0.5115054599 -1.287030476          C block_10"}]
